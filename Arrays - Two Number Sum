Solution 1:
import java.util.*;

class Program {
	//O(n log (n)) time | O (1) space
  public static int[] twoNumberSum(int[] array, int targetSum) {
    Arrays.sort(array);
		int left = 0;
		int right = array.length - 1;
		while(left < right){
			if (array[left] + array[right] == targetSum){
				return new int[]{array[right], array[left]};
			} else if (array[left] + array[right] < targetSum){
				left += 1;
			} else if (array[left] + array[right] > targetSum){
				right -= 1;
			}
		}
    return new int[0];
  }
}

Solution 2:
import java.util.*;

class Program {
	//O (n) time | O (n) space
  public static int[] twoNumberSum(int[] array, int targetSum) {
    Set<Integer> nums = new HashSet<Integer>();
		for (int num : array){
			int potentionalMatch = targetSum - num;
			if (nums.contains(potentionalMatch)){
				return new int[] {num, potentionalMatch};
			} else {
				nums.add(num);
			}
		}
    return new int[0];
  }
}

Solution 3:
import java.util.*;

class Program {
	//O (N ^ 2) time | O (1) space
  public static int[] twoNumberSum(int[] array, int targetSum) {
    for (int i = 0; i < array.length - 1; i++){
			int firstNum = array[i];
			for (int j = i + 1; j <array.length; j++){
				int secondNum = array[j];
				if (firstNum + secondNum == targetSum){
					return new int[]{firstNum, secondNum};
				}
			}
		}
    return new int[0];
  }
}
