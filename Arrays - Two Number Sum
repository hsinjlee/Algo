## Solution 1:
import java.util.*;

class Program {
	//O(n log (n)) time | O (1) space
  public static int[] twoNumberSum(int[] array, int targetSum) {
    Arrays.sort(array);
		int left = 0;
		int right = array.length - 1;
		while(left < right){
			if (array[left] + array[right] == targetSum){
				return new int[]{array[right], array[left]};
			} else if (array[left] + array[right] < targetSum){
				left += 1;
			} else if (array[left] + array[right] > targetSum){
				right -= 1;
			}
		}
    return new int[0];
  }
}

# O (N^2) time | O (1) space
def twoNumberSum(array, targetSum):
    # Write your code here.
    for i in range(len(array) - 1):
        firstNum = array[i]
        for j in range(i + 1, len(array)):
            secondNum = array[j]
            if firstNum + secondNum == targetSum:
                return [firstNum, secondNum]
    return []


## Solution 2:
import java.util.*;

class Program {
	//O (n) time | O (n) space
  public static int[] twoNumberSum(int[] array, int targetSum) {
    Set<Integer> nums = new HashSet<Integer>();
		for (int num : array){
			int potentionalMatch = targetSum - num;
			if (nums.contains(potentionalMatch)){
				return new int[] {num, potentionalMatch};
			} else {
				nums.add(num);
			}
		}
    return new int[0];
  }
}

# O (n) time | O (n) space
def twoNumberSum(array, targetSum):
    # Write your code here.
    nums = {}
    for num in array:
        potentialMatch = targetSum - num
        if potentialMatch in nums:
            return [num, potentialMatch]
        else:
            nums[num] = True
    return []
    

Solution 3:
import java.util.*;

class Program {
	//O (N ^ 2) time | O (1) space
  public static int[] twoNumberSum(int[] array, int targetSum) {
    for (int i = 0; i < array.length - 1; i++){
			int firstNum = array[i];
			for (int j = i + 1; j <array.length; j++){
				int secondNum = array[j];
				if (firstNum + secondNum == targetSum){
					return new int[]{firstNum, secondNum};
				}
			}
		}
    return new int[0];
  }
}

# O(n log(n)) time | O(1) space 
def twoNumberSum(array, targetSum):
    array.sort()
    left = 0
    right = len(array) - 1
    while left < right:
        currentSum = array[left] + array[right]
        if currentSum == targetSum:
            return [array[left], array[right]]
        elif currentSum < targetSum:
            left += 1
        elif currentSum > targetSum:
            right -= 1
    return []
    
## Sandbox

import program
import unittest


class TestProgram(unittest.TestCase):
    def test_case_1(self):
        output = program.twoNumberSum([3, 5, -4, 8, 11, 1, -1, 6], 10)
        self.assertTrue(len(output) == 2)
        self.assertTrue(11 in output)
        self.assertTrue(-1 in output)
