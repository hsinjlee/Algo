# Solution 1
# O (n^3) time | O (n) space
def longestPalindromicSubstring(string):
    longest = ""
    for i in range(len(string)):
        for j in range(i, len(string)):
            substring = string[i : j + 1]
            if len(substring) > len(longest) and isPalindromic(substring):
                longest = substring
    return longest

def isPalindromic(string):
    leftIdx = 0
    rightIdx = len(string) - 1
    while leftIdx < rightIdx:
        if string[leftIdx] != string[rightIdx]:
            return False
        leftIdx += 1
        rightIdx -= 1
    return True

# Solution 2
# O (n^2) time | O (n) space 
def longestPalindromicSubstring(string):
    currentLongest = [0, 1]
    for i in range(1, len(string)):
        odd = getLongestPalindromicFrom(string, i - 1, i + 1)
        even = getLongestPalindromicFrom(string, i - 1, i)
        longest = max(odd, even, key=lambda x:x[1] - x[0])
        currentLongest = max(longest, currentLongest, key=lambda x:x[1] - x[0])
    return string[currentLongest[0] : currentLongest[1]]

def getLongestPalindromicFrom(string, leftIdx, rightIdx):
    while leftIdx >= 0 and rightIdx < len(string):
        if string[leftIdx] != string[rightIdx]:
            break
        leftIdx -= 1
        rightIdx += 1
    return [leftIdx + 1, rightIdx]

# Sandbox
import program
import unittest


class TestProgram(unittest.TestCase):
    def test_case_1(self):
        self.assertEqual(program.longestPalindromicSubstring("abaxyzzyxf"), "xyzzyx")
