# Solution 1
# O (nlog(n)) time | O (n) space - where n is 
# the length of the input array
def sortedSquaredArray(array):
    sortedSquares = [0 for _ in array]

    for i in range(len(array)):
        sortedSquares[i] = array[i] * array[i]

    sortedSquares.sort()
    return sortedSquares

# Solution 2
# O (n) time | O (n) space - where n is the length of 
# the input array
def sortedSquaredArray(array):
    sortedSquares = [0 for _ in array]
    smallerValueIdx = 0
    largerValueIdx = len(array) - 1

    for i in reversed(range(len(array))):
        smallerValue = array[smallerValueIdx]
        largerValue = array[largerValueIdx]

        if abs(smallerValue) > abs(largerValue):
            sortedSquares[i] = smallerValue * smallerValue
            smallerValueIdx += 1
        else:
            sortedSquares[i] = largerValue * largerValue
            largerValueIdx -= 1

    return sortedSquares

# Sandbox
import program
import unittest


class TestProgram(unittest.TestCase):
    def test_case_1(self):
        input = [1, 2, 3, 5, 6, 8, 9]
        expected = [1, 4, 9, 25, 36, 64, 81]
        actual = program.sortedSquaredArray(input)
        self.assertEqual(actual, expected)
