# Solution 1
# O (nlog(n)) time | O (n) space - where n is the length of the input array
def mergeOverlappingIntervals(intervals):
    sortedIntervals = sorted(intervals, key=lambda x:x[0])

    mergedIntervals = []
    currentInterval = sortedIntervals[0]
    mergedIntervals.append(currentInterval)

    for nextInterval in sortedIntervals:
        _, currentIntervalEnd = currentInterval
        nextIntervalStart, nextIntervalEnd = nextInterval

        if currentIntervalEnd >= nextIntervalStart:
            currentInterval[1] = max(currentIntervalEnd, nextIntervalEnd)
        else:
            currentInterval = nextInterval
            mergedIntervals.append(currentInterval)

    return mergedIntervals
    
# Solution 2
# O (nlog(n)) time | O (n) space - where n is the length of the input array
def mergeOverlappingIntervals(intervals):
    intervals.sort(key=lambda x:x[0])

    mergedIntervals = [intervals[0]]

    for i in range(1, len(intervals)):
        lastMergedInterval = mergedIntervals[-1]

        if intervals[i][0] <= lastMergedInterval[1]:
            mergedIntervals[-1] = [lastMergedInterval[0], max(intervals[i][1], lastMergedInterval[1])]
        else:
            mergedIntervals.append(intervals[i])

    return mergedIntervals

# Sandbox
import program
import unittest


class TestProgram(unittest.TestCase):
    def test_case_1(self):
        intervals = [[1, 2], [3, 5], [4, 7], [6, 8], [9, 10]]
        expected = [[1, 2], [3, 8], [9, 10]]
        actual = program.mergeOverlappingIntervals(intervals)
        self.assertEqual(actual, expected)
